let initialState,tokenize,JSONify,toJSON,Universalizer;_c5b‍.x([["default",()=>_c5b‍.o]]);_c5b‍.w("./initialState",[["default",["initialState"],function(v){initialState=v}]]);_c5b‍.w("./reducerFunctions/tokenize",[["default",["tokenize","JSONify"],function(v){tokenize=JSONify=v}]]);_c5b‍.w("./reducerFunctions/universalize",[["default",["toJSON","Universalizer"],function(v){toJSON=Universalizer=v}]]);






const reducer = (state = initialState, action) =>{
    switch(action.type){
        case "UPDATE_SOURCE_CODE":
            state = {
                ...state,
                leftText : action.payload,
                // rightText : [...state.rightText, action.payload]
            };
            break;
        case "TOKENIZE":
            let t = tokenize(action.payload)
            state = {
                ...state,
                tokens: t,
                tokenizedText: JSON.stringify(t, null, 2)
            };
            break;
        case "JSON":
                state = {
                    ...state,
                    json : action.payload
                };
                break;
        case "OUTPUT":
            state = {
                ...state,
                python : action.payload, //action.payload
                display: true
            };
            break;
        
        case "JSON":
           state = {
                ...state,
                JSONText: Universalizer(action.payload)
           };
           break;
            
        default:
            state = initialState;
    }
    return state;
}

_c5b‍.d(reducer);